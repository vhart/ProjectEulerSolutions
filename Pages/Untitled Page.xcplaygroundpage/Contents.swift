//: ## Project Euler Solutions 
//: ### Page 1 #'s 1 - 5

import UIKit

//: ### Problem 1
//: "Multiples of 3 and 5"
//:
//: If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//:
//: Find the sum of all the multiples of 3 or 5 below 1000.

var sum = 0

for var index = 3; index < 1000; index++ {

    if index%3 == 0 || index%5 == 0{
        sum += index
    }
}

print("\(sum)")


//: ### Problem 2
//: "Even Fibonacci numbers"
//:
//: Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//:
//: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//:
//: By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


var sumFib = 0

var array = [1, 1]
while array.last < 4000000 {

    let next = array.last! + array[array.count - 2]
    if next%2 == 0{
        sumFib += next
    }

    array.append(next)

}

print("\(sumFib)")


//: ### Problem 3
//: "Largest prime factor"
//:
//: The prime factors of 13195 are 5, 7, 13 and 29.
//:
//: What is the largest prime factor of the number 600851475143 ?


func getLargestPrimeFactor(number: Int) -> Int{

    let root = getSquareRootFloorValue(number)

    for var factor = 2; factor <= root; factor++ {

        if number%factor == 0{

            return getLargestPrimeFactor(number/factor)

        }

    }

    return number

}

func getSquareRootFloorValue(number: Int) -> Int{

    if(number > 0){
        return lrint(sqrt(Double(number)))
    }
    else{
        return 0
    }
}

getLargestPrimeFactor(600851475143)


//: ### Problem 4
//:
//: Largest palindrome product
//:
//: A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
//:
//: Find the largest palindrome made from the product of two 3-digit numbers.

public struct digitsForFiveOrSixDigitPalindromes {

    let first, second, third: Int

    public init(_ firstDig: Int, _ secondDig: Int, _ thirdDig: Int){

        first  = firstDig
        second = secondDig
        third  = thirdDig

    }
}

func findLargestPalindrome() -> Int{

    var maxToMinFiveDigitPalindromes : [Int] = []

    for var a = 9 ; a > 0 ; a-- {
        for var b = 9 ; b >= 0 ; b-- {
            for var c = 9 ; c >= 0 ; c-- {

                let sixDigitPalindrome = makeSixDigitPalindrome(digitsForFiveOrSixDigitPalindromes(a,b,c))

                if (isPalindromeThreeDigitByThreeDigitProduct(sixDigitPalindrome)){
                    return sixDigitPalindrome
                }

                maxToMinFiveDigitPalindromes.append(makeFiveDigitPalindrome(digitsForFiveOrSixDigitPalindromes(a,b,c)))

            }
        }
    }

    return findLargestPalindromeFromArray(maxToMinFiveDigitPalindromes)

}

func makeSixDigitPalindrome(digits: digitsForFiveOrSixDigitPalindromes) ->Int{

    let sixDigitPalindrome = digits.first*100000 + digits.second*10000 + digits.third*1000 + digits.third*100 + digits.second*10 + digits.first

    return sixDigitPalindrome

}


func makeFiveDigitPalindrome(digits: digitsForFiveOrSixDigitPalindromes) ->Int{

    let fiveDigitPalindrome = digits.first*10000 + digits.second*1000 + digits.third*100 + digits.second*10 + digits.first

    return fiveDigitPalindrome

}


func isPalindromeThreeDigitByThreeDigitProduct(palindrome: Int) -> Bool{

    for var factor = 999; factor >= 101; factor-- {
        if palindrome/factor < 1000{
            if palindrome%factor == 0{
                return true
            }
        }
        else{
            break
        }
    }
    return false
}

func findLargestPalindromeFromArray(fiveDigitArray: [Int]) -> Int {

    for var index = 0; index < fiveDigitArray.count ; index++ {
        if isPalindromeThreeDigitByThreeDigitProduct(fiveDigitArray[index]){
            return fiveDigitArray[index]
        }
    }

    return 0;
}

let palStartTime = CACurrentMediaTime()

findLargestPalindrome()

let palEndTime = CACurrentMediaTime()
print("\(palEndTime - palStartTime)")


//: ### Problem 5
//: Smallest multiple
//:
//: 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
//:
//: What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

var rangeOfValues: Range<Int> = 1...20

func euclideanAlgorithm(a: Int,_ b: Int) -> Int {

    let remainder = a%b

    if remainder == 0 {
        return b
    }

    return euclideanAlgorithm(b, remainder)
}

func calculateLCM(a: Int,_ b: Int) -> Int{

    let larger  = a >= b ? a : b
    let smaller = a >= b ? b : a

    return (a*b)/euclideanAlgorithm(larger, smaller)
    
}

func calculateLCMOfNumbersInRange(from: Int,_ to: Int) -> Int {
    
    var LCM : Int = 1
    
    for var i = from; i <= to; i++ {
        
        LCM = calculateLCM(LCM, i)
        
    }
    
    return LCM
}

let LCM = calculateLCMOfNumbersInRange(1, 20)

//: [Next](@next)
